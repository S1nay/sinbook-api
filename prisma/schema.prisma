// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  nickName              String         @map("nick_name")
  avatarPath            String?        @map("avatar_path")
  name                  String
  secondName            String         @map("second_name")
  middleName            String         @map("middle_name")
  email                 String         @unique
  passwordHash          String         @map("password_hash")
  posts                 Post[]         @relation("user_posts")
  comments              Comment[]      @relation("user_comments")
  city                  String?        @default("")
  birthDate             DateTime?
  gender                Gender
  isDeleted             Boolean        @default(false) @map("is_deleted")
  followers             Follows[]      @relation("following")
  follows               Follows[]      @relation("follower")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")
  messages              Message[]      @relation("author")
  conversationCreator   Conversation[] @relation("conversation_creator")
  conversationRecipient Conversation[] @relation("conversation_recipient")
}

model Follows {
  follower      User      @relation("follower", fields: [followerId], references: [id])
  followerId    Int       @map("follower_id")
  following     User      @relation("following", fields: [followingId], references: [id])
  followingId   Int       @map("following_id")
  mutualFollow  Boolean   @map("mutual_follow")

  @@id([followerId, followingId])
}

model Conversation {
  id            Int       @id @default(autoincrement())
  messages      Message[] @relation("conversation_messages")
  lastMessage   Message?  @relation("last_message", fields: [lastMessageId], references: [id])
  lastMessageId Int?      @unique() @map("last_message_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  recipient     User      @relation("conversation_recipient", fields: [recipientId], references: [id])
  recipientId   Int
  creator       User      @relation("conversation_creator", fields: [creatorId], references: [id])
  creatorId     Int
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String
  author         User          @relation("author", fields: [authorId], references: [id])
  authorId       Int           @map("author_id")
  conversation   Conversation  @relation("conversation_messages", fields: [conversationId], references: [id])
  conversationId Int           @map("conversation_id")
  lastMessage    Conversation? @relation("last_message")
  isReaded       Boolean       @default(false) @map("is_readed")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @map("updated_at")
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  views     Int       @default(0)
  user      User      @relation("user_posts", fields: [userId], references: [id])
  userId    Int       @map("user_id")
  comments  Comment[] @relation("post_comments")
  likes     Int       @default(0)
  images    String[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation("user_comments", fields: [userId], references: [id])
  userId    Int      @map("user_id")
  post      Post     @relation("post_comments", fields: [postId], references: [id])
  postId    Int      @map("post_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum Gender {
  FEMALE
  MALE
}
