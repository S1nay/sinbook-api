// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                   @id @default(autoincrement())
  nickName      String                @map("nick_name")
  avatarPath    String?
  name          String
  secondName    String                @map("second_name")
  middleName    String                @map("middle_name")
  email         String                @unique
  passwordHash  String
  posts         Post[]
  comments      Comment[]
  city          String                @default("")
  birthDate     DateTime?
  gender        Gender
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  isDeleted     Boolean               @default(false) @map("is_deleted")
  followers     Follows[]             @relation("following")
  following     Follows[]             @relation("follower")
  messages      Message[]
  conversations ConversationMembers[]
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model Conversation {
  id                  Int                   @id @default(autoincrement())
  name                String
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  messages            Message[]             @relation("conversation_messages")
  members             ConversationMembers[]
  unreadMessagesCount Int                   @default(0) @map("unread_messages_count")
  lastMessage         Message?              @relation("last_message", fields: [lastMessagId], references: [id])
  lastMessagId        Int?                  @unique()
}

model ConversationMembers {
  member         User         @relation(fields: [memberId], references: [id])
  memberId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  @@id([conversationId, memberId])
}

model Message {
  id             Int           @id @default(autoincrement())
  message        String
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @map("updated_at")
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       Int
  conversation   Conversation  @relation("conversation_messages", fields: [conversationId], references: [id])
  conversationId Int
  lastMessage    Conversation? @relation("last_message")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  views     Int       @default(0)
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  comments  Comment[]
  likes     Int       @default(0)
  images    String[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum Gender {
  FEMALE
  MALE
}
